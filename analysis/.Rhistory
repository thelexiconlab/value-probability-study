summary(glmer1)
car::Anova(glmer1)
glmer1 = glmer(data = trials, accuracy ~ accessibility*pragmatics + (1|subject) + (1|words), family = "binomial")
summary(glmer1)
trials = trials %>%
mutate(center_a = as.numeric(scale(accessibility, center = TRUE, scale = TRUE)),
center_p = as.numeric(scale(pragmatics, center = TRUE, scale= TRUE)))
glmer1 = glmer(data = trials, accuracy ~ center_p*center_a + (1|subject) + (1|words), family = "binomial")
summary(glmer1)
hist(trials$center_a)
hist(trials$center_p)
car::Anova(glmer1)
trials %>%
ggplot(aes(x = pragmatics, y = accuracy, group = accessibility_categorical, color = accessibility_categorical)) +
geom_smooth(method = "lm") +
theme_few()
fixed_effects = fixef(glmer1)
fixed_effects
probs = exp(fixed_effects)/(1+exp(fixed_effects))
summary(glmer1)
car::Anova(glmer1)
glmer1 = glmer(data = trials, accuracy ~ center_p*center_a + (center_p|subject) + (center_p|words), family = "binomial")
fixed_effects = fixef(glmer1)
summary(glmer1)
glmer1 = glmer(data = trials, accuracy ~ center_p*center_a + (center_p*center_a|subject) + (center_p*center_a|words), family = "binomial")
View(incorrect_attentions)
View(incorrect_attentions)
incorrect_attentions = incorrect_attentions %>%
group_by(subject) %>%
count()%>%
filter(n >1)
View(incorrect_attentions)
incorrect_attentions = trials %>%
mutate(adjusted_attention = ifelse(is_seen == 1, ifelse(stringdist(tolower(response), clue, method = "lv") < 2, 1, 0), 2)) %>%
filter(adjusted_attention == 0)
incorrect_attentions
incorrect_attentions = trials %>%
mutate(adjusted_attention = ifelse(is_seen == 1, ifelse(stringdist(tolower(response), clue, method = "lv") < 2, 1, 0), 2)) %>%
filter(adjusted_attention == 0)
trials = data %>%
filter(type_of_trial == "experiment" | is_seen == 1)
nrow(trials)
ncol(trials)
trials %>%
group_by(subject) %>%
count()
trials %>%
group_by(clue_type) %>%
count()
trials %>%
group_by(subject, clue_type) %>%
count()
incorrect_attentions = trials %>%
mutate(adjusted_attention = ifelse(is_seen == 1, ifelse(stringdist(tolower(response), clue, method = "lv") < 2, 1, 0), 2)) %>%
filter(adjusted_attention == 0)
View(incorrect_attentions)
incorrect_attentions = incorrect_attentions %>%
group_by(subject) %>%
count()%>%
filter(n >1)
View(incorrect_attentions)
trials = trials %>%
filter(!(subject %in% incorrect_attentions$subject))
trials_by_subject = trials %>%
group_by(subject) %>%
count()
insufficient_trials = trials_by_subject %>%
filter(n < 66)
trials = trials %>%
filter(!(subject %in% insufficient_trials$subject)) %>%
filter(type_of_trial == "experiment")
trials %>%
group_by(subject) %>%
count()
trials = trials %>%
mutate(accessibility_categorical = ifelse(accessibility < mean(accessibility), "Low", "High"))
trials %>%
ggplot(aes(x = pragmatics, y = accuracy, group = accessibility_categorical, color = accessibility_categorical)) +
geom_smooth(method = "lm") +
theme_few()
# center/scale accessibility and pragmatics
trials = trials %>%
mutate(center_a = as.numeric(scale(accessibility, center = TRUE, scale = TRUE)),
center_p = as.numeric(scale(pragmatics, center = TRUE, scale= TRUE)))
glmer1 = glmer(data = trials, accuracy ~ center_p*center_a + (center_p*center_a|subject) + (center_p*center_a|words), family = "binomial")
## partial model
glmer1 = glmer(data = trials, accuracy ~ center_p*center_a + (center_p + center_a|subject) + (center_p + center_a|words), family = "binomial")
## partial model
glmer1 = glmer(data = trials, accuracy ~ center_p*center_a + (center_p |subject) + (center_p |words), family = "binomial")
fixed_effects = fixef(glmer1)
probs = exp(fixed_effects)/(1+exp(fixed_effects))
summary(glmer1)
car::Anova(glmer1)
data %>%
group_by(subject) %>%
count()
acc_by_subject = trials %>%
group_by(subject) %>%
summarise(av_acc = mean(accuracy))
View(acc_by_subject)
mean(acc_by_subject$av_acc)
sd(acc_by_subject$av_acc)
c = trials %>%
rowwise() %>%
mutate(comma_count = str_count(all_responses, ",") + 1) %>%
select(all_responses, comma_count)
mean(c$comma_count)
x = trials %>%
separate(response, into = c("guess1", "guess2"), sep = ",") %>%
mutate(guess1 = gsub("[^a-zA-Z]", "", guess1)) %>%
mutate(guess1 = tolower(guess1)) %>%
mutate(guess2 = gsub("[^a-zA-Z]", "", guess2)) %>%
mutate(guess2 = tolower(guess2))
x_1 = x %>%
group_by(guess1, clue) %>%
count()
x_2 = x %>%
group_by(guess2,clue) %>%
count()
guessed_words = bind_rows(x_1, x_2) %>%
mutate(word = ifelse(!(is.na(guess1)), guess1, guess2)) %>%
group_by(word, clue) %>%
summarise(n = sum(n))
y = trials %>%
group_by(clue) %>%
count()
guessed_words = guessed_words %>%
mutate(probability = n/y$n[match(clue, y$clue)])
guess_accessibility = read_csv("../data/stimuli/guess_visit_counts.csv")
sona_data = read_csv("../data/behavioral/connector-ap-sona.csv")
other_data = read_csv("../data/behavioral/connector-ap.csv")
other_data = other_data %>%
mutate(sona_id = 1) %>%
relocate(sona_id, .before = rt)
data = rbindlist(list(sona_data, other_data))
nrow(data)
ncol(data)
data %>%
group_by(subject) %>%
count()
data %>%
group_by(clue_type) %>%
count()
data %>%
group_by(subject, clue_type) %>%
count()
trials = data %>%
filter(type_of_trial == "experiment" | is_seen == 1)
nrow(trials)
ncol(trials)
trials %>%
group_by(subject) %>%
count()
trials %>%
group_by(clue_type) %>%
count()
trials %>%
group_by(subject, clue_type) %>%
count()
incorrect_attentions = trials %>%
mutate(adjusted_attention = ifelse(is_seen == 1, ifelse(stringdist(tolower(response), clue, method = "lv") < 2, 1, 0), 2)) %>%
filter(adjusted_attention == 0)
incorrect_attentions = incorrect_attentions %>%
group_by(subject) %>%
count()%>%
filter(n >1)
trials = trials %>%
filter(!(subject %in% incorrect_attentions$subject))
trials_by_subject = trials %>%
group_by(subject) %>%
count()
insufficient_trials = trials_by_subject %>%
filter(n < 66)
trials = trials %>%
filter(!(subject %in% insufficient_trials$subject)) %>%
filter(type_of_trial == "experiment")
trials %>%
group_by(subject) %>%
count()
trials = trials %>%
mutate(accessibility_categorical = ifelse(accessibility < mean(accessibility), "Low", "High"))
trials %>%
ggplot(aes(x = pragmatics, y = accuracy, group = accessibility_categorical, color = accessibility_categorical)) +
geom_smooth(method = "lm") +
theme_few()
# center/scale accessibility and pragmatics
trials = trials %>%
mutate(center_a = as.numeric(scale(accessibility, center = TRUE, scale = TRUE)),
center_p = as.numeric(scale(pragmatics, center = TRUE, scale= TRUE)))
## partial model
glmer1 = glmer(data = trials, accuracy ~ center_p*center_a + (center_p |subject) + (center_p |words), family = "binomial")
## full model
#glmer1 = glmer(data = trials, accuracy ~ center_p*center_a + (center_p*center_a|subject) + (center_p*center_a|words), family = "binomial")
fixed_effects = fixef(glmer1)
probs = exp(fixed_effects)/(1+exp(fixed_effects))
summary(glmer1)
car::Anova(glmer1)
data %>%
group_by(subject) %>%
count()
acc_by_subject = trials %>%
group_by(subject) %>%
summarise(av_acc = mean(accuracy))
mean(acc_by_subject$av_acc)
sd(acc_by_subject$av_acc)
c = trials %>%
rowwise() %>%
mutate(comma_count = str_count(all_responses, ",") + 1) %>%
select(all_responses, comma_count)
mean(c$comma_count)
x = trials %>%
separate(response, into = c("guess1", "guess2"), sep = ",") %>%
mutate(guess1 = gsub("[^a-zA-Z]", "", guess1)) %>%
mutate(guess1 = tolower(guess1)) %>%
mutate(guess2 = gsub("[^a-zA-Z]", "", guess2)) %>%
mutate(guess2 = tolower(guess2))
#left_join(visit_counts)
x_1 = x %>%
group_by(guess1, clue) %>%
count()
x_2 = x %>%
group_by(guess2,clue) %>%
count()
guessed_words = bind_rows(x_1, x_2) %>%
mutate(word = ifelse(!(is.na(guess1)), guess1, guess2)) %>%
group_by(word, clue) %>%
summarise(n = sum(n))
y = trials %>%
group_by(clue) %>%
count()
guessed_words = guessed_words %>%
mutate(probability = n/y$n[match(clue, y$clue)])
guess_accessibility = read_csv("../data/stimuli/guess_visit_counts.csv")
View(guessed_words)
install.packages("MuMIn")
MuMIn::r.squaredGLMM(glmer1)
# guess_acc = guess_accessibility %>%
#   #filter(budget == 32)
guessed_words = guessed_words %>%
left_join(guess_accessibility)
View(guessed_words)
guessed_words %>%
ggplot(aes(x = visit_count, y = probability, group = budget, color = budget)) +
geom_smooth(method = "lm") +
theme_few()
hist(guessed_words$visit_count)
hist(guessed_words$probability)
budget_2 = lmer(data =guessed_words, probability ~ visit_count + (1|clue))
summary(budget_2)
MuMIn::r.squaredGLMM(budget_2)
budget_2 = lmer(data =guessed_words %>% filter(budget == 2), probability ~ visit_count + (1|clue))
summary(budget_2)
MuMIn::r.squaredGLMM(budget_2)
View(guessed_words %>% filter(budget == 2))
budget_2 = lmer(data =guessed_words %>% filter(budget == 2), probability ~ visit_count + (1|word))
summary(budget_2)
budget_2 = lmer(data =guessed_words %>% filter(budget == 2), probability ~ visit_count + (visit_count|word))
summary(budget_2)
MuMIn::r.squaredGLMM(budget_2)
budget_4 = lmer(data =guessed_words %>% filter(budget == 4), probability ~ visit_count + (visit_count|word))
summary(budget_4)
MuMIn::r.squaredGLMM(budget_4)
unique(guessed_words$budget)
budget_4 = lmer(data =guessed_words %>% filter(budget == 32), probability ~ visit_count + (visit_count|word))
summary(budget_4)
MuMIn::r.squaredGLMM(budget_4)
budget_4 = lmer(data =guessed_words %>% filter(budget == 32), probability ~ visit_count + (1|word))
summary(budget_4)
MuMIn::r.squaredGLMM(budget_4)
budget_4 = lmer(data =guessed_words %>% filter(budget == 16), probability ~ visit_count + (1|word))
summary(budget_4)
MuMIn::r.squaredGLMM(budget_4)
budget_2 = lmer(data =guessed_words %>% filter(budget == 2), probability ~ visit_count + (visit_count|word))
summary(budget_2)
MuMIn::r.squaredGLMM(budget_2)
budget_2 = lmer(data =guessed_words %>% filter(budget == 2), probability ~ visit_count + (1|word))
summary(budget_2)
MuMIn::r.squaredGLMM(budget_2)
budget_4 = lmer(data =guessed_words %>% filter(budget == 16), probability ~ visit_count + (visit_count|word))
summary(budget_4)
MuMIn::r.squaredGLMM(budget_4)
budget_4 = lmer(data =guessed_words %>% filter(budget == 32), probability ~ visit_count + (visit_count|word))
summary(budget_4)
MuMIn::r.squaredGLMM(budget_4)
budget_4 = lmer(data =guessed_words %>% filter(budget == 32), probability ~ visit_count + (visit_count|word),
control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
summary(budget_4)
MuMIn::r.squaredGLMM(budget_4)
budget_2 = lmer(data =guessed_words %>% filter(budget == 2), probability ~ visit_count + (visit_count|word),
control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
MuMIn::r.squaredGLMM(budget_2)[1]
budget_2 = lmer(data =guessed_words %>% filter(budget == 2), probability ~ visit_count + (visit_count|word),
control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
summary(budget_2)
MuMIn::r.squaredGLMM(budget_2)[1]
data %>%
group_by(subject) %>%
count()
incorrect_attentions = trials %>%
mutate(adjusted_attention = ifelse(is_seen == 1, ifelse(stringdist(tolower(response), clue, method = "lv") < 2, 1, 0), 2)) %>%
filter(adjusted_attention == 0)
trials = data %>%
filter(type_of_trial == "experiment" | is_seen == 1)
nrow(trials)
ncol(trials)
trials %>%
group_by(subject) %>%
count()
trials %>%
group_by(clue_type) %>%
count()
trials %>%
group_by(subject, clue_type) %>%
count()
trials = data %>%
filter(type_of_trial == "experiment" | is_seen == 1)
incorrect_attentions = trials %>%
mutate(adjusted_attention = ifelse(is_seen == 1, ifelse(stringdist(tolower(response), clue, method = "lv") < 2, 1, 0), 2)) %>%
filter(adjusted_attention == 0)
View(incorrect_attentions %>% select(response, clue, is_seen, adjusted_attention))
incorrect_attentions = trials %>%
mutate(adjusted_attention = ifelse(is_seen == 1, ifelse(stringdist(tolower(response), clue, method = "lv") < 2, 1, 0), 2))# %>%
View(incorrect_attentions %>% select(response, clue, is_seen, adjusted_attention))
trials = data %>%
filter(type_of_trial == "experiment" | is_seen == 1)
incorrect_attentions = trials %>%
mutate(adjusted_attention = ifelse(is_seen == 1, ifelse(stringdist(tolower(response), clue, method = "lv") < 2, 1, 0), 2))# %>%
incorrect_attentions = trials %>%
mutate(adjusted_attention = ifelse(is_seen == 1, ifelse(stringdist(tolower(response), clue, method = "lv") < 2, 1, 0), 2)) %>%
filter(adjusted_attention == 0)
incorrect_attentions = trials %>%
mutate(adjusted_attention = ifelse(is_seen == 1, ifelse(stringdist(tolower(response), clue, method = "lv") < 2, 1, 0), 2)) %>%
filter(adjusted_attention == 0)
incorrect_attentions = incorrect_attentions %>%
group_by(subject) %>%
count()%>%
# additional filter to remove only people who got more than 1 wrong
filter(n >1)
trials = trials %>%
filter(!(subject %in% incorrect_attentions$subject))
# need to add here code to remove the singular incorrect attention trials
trials_by_subject = trials %>%
group_by(subject) %>%
count()
insufficient_trials = trials_by_subject %>%
filter(n < 66)
trials = trials %>%
filter(!(subject %in% insufficient_trials$subject)) %>%
filter(type_of_trial == "experiment")
trials %>%
group_by(subject) %>%
count()
trials = trials %>%
mutate(accessibility_categorical = ifelse(accessibility < mean(accessibility), "Low", "High"))
trials %>%
ggplot(aes(x = pragmatics, y = accuracy, group = accessibility_categorical, color = accessibility_categorical)) +
geom_smooth(method = "lm") +
theme_few()
guessed_words %>% group_by(budget) %>% do(lmer(probability ~ visit_count + (visit_count|word), .))
guessed_words %>% group_by(budget) %>%
mutate(results = map(data, ~ {
lmer(probability ~ visit_count + (1 | word),
data = .) %>%
broom.mixed::tidy()
})) %>%
unnest(results)
guessed_words %>% group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)))
guessed_words %>% group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)), control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
guessed_words %>% filter(budget == 2) %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)), control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
guessed_words %>% filter(budget < 32) %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)), control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
guessed_words %>% filter(budget < 16) %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)), control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
models = guessed_words %>% filter(budget < 16) %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)),
control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e5)))
models %>% tidy(model)
models$model
models$model[[1]]
MuMIn::r.squaredGLMM(models$model[[1]])
models = guessed_words %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)),
control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e10)))
models = guessed_words %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)),
control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2e10)))
model_2 = models$model[[1]]
MuMIn::r.squaredGLMM(models$model[[1]])
MuMIn::r.squaredGLMM(models$model[[1]])[1]
MuMIn::r.squaredGLMM(models$model[[2]])[1]
MuMIn::r.squaredGLMM(models$model[[3]])[1]
MuMIn::r.squaredGLMM(models$model[[4]])[1]
MuMIn::r.squaredGLMM(models$model[[5]])[1]
MuMIn::r.squaredGLMM(models$model[[6]])[1]
models = guessed_words %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)),
control = lmerControl(optimizer="Nelder_Mead",optCtrl=list(maxfun=2e10)))
models = guessed_words %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)),
control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2000000)))
MuMIn::r.squaredGLMM(models$model[[1]])[1]
MuMIn::r.squaredGLMM(models$model[[2]])[1]
MuMIn::r.squaredGLMM(models$model[[3]])[1]
MuMIn::r.squaredGLMM(models$model[[4]])[1]
MuMIn::r.squaredGLMM(models$model[[5]])[1]
sjPlot::plot_model(models$model[[1]])
sjPlot::plot_model(models$model[[1]], type = "re")
models = guessed_words %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)),
control = lmerControl(optimizer="optimx",optCtrl=list(maxfun=2000000, method = 'L-BFGS-B')))
models = guessed_words %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)),
control = lmerControl(optimizer="optimx",optCtrl=list(maxfun=2000000, method = 'nlminb')))
models = guessed_words %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (1|word)),
control = lmerControl(optimizer="optimx",optCtrl=list(maxfun=2000000, method = 'L-BFGS-B')))
MuMIn::r.squaredGLMM(models$model[[1]])[1]
models = guessed_words %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)),
control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2000000, method = 'L-BFGS-B')))
models = guessed_words %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)),
control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2000000, method = 'L-BFGS-B')), REML = FALSE)
models = guessed_words %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (1|word)),
control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2000000)))
MuMIn::r.squaredGLMM(models$model[[1]])[1]
MuMIn::r.squaredGLMM(models$model[[1]])[2]
MuMIn::r.squaredGLMM(models$model[[1]])[3]
MuMIn::r.squaredGLMM(models$model[[1]])[3]
MuMIn::r.squaredGLMM(models$model[[1]])[1]
MuMIn::r.squaredGLMM(models$model[[2]])[1]
MuMIn::r.squaredGLMM(models$model[[3]])[1]
MuMIn::r.squaredGLMM(models$model[[4]])[1]
MuMIn::r.squaredGLMM(models$model[[5]])[1]
models = guessed_words %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)),
control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2000000)))
MuMIn::r.squaredGLMM(models$model[[5]])[1]
MuMIn::r.squaredGLMM(models$model[[5]])
MuMIn::r.squaredGLMM(models$model[[1]])
models = guessed_words %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)),
control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2000000)))
MuMIn::r.squaredGLMM(models$model[[1]])
models
models$model[[1]]
models$model[[5]]
sjPlot::plot_model(glmer1, type = "int")
sjPlot::plot_model(glmer1, type = "int") + theme_few()
sjPlot::plot_model(glmer1, type = "int") + theme_few()+ labs(x= "")
sjPlot::plot_model(glmer1, type = "int") + theme_few()
models_2to16 = guessed_words %>% filter(budget < 16) %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)),
control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2000000)))
models_2to16 = guessed_words %>% filter(budget > 16) %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)),
control = lmerControl(optimizer="optimx",optCtrl=list(maxfun=2000000)))
MuMIn::r.squaredGLMM(models$model[[1]])
MuMIn::r.squaredGLMM(models_2to16$model[[1]])
MuMIn::r.squaredGLMM(models_2to16$model[[2]])
MuMIn::r.squaredGLMM(models_2to16$model[[1]])
MuMIn::r.squaredGLMM(models_2to16$model[[2]])
models_2to16
models_2to16 = guessed_words %>% filter(budget < 32) %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)),
control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2000000)))
models_2to16 = guessed_words %>% filter(budget < 16) %>%
group_by(budget) %>%
do(model = lmer(data = ., probability ~ visit_count + (visit_count|word)),
control = lmerControl(optimizer="bobyqa",optCtrl=list(maxfun=2000000)))
models_2to16
MuMIn::r.squaredGLMM(models_2to16$model[[1]])
MuMIn::r.squaredGLMM(models_2to16$model[[2]])
MuMIn::r.squaredGLMM(models_2to16$model[[3]])
View(guessed_words %>% filter(budget ==32))
unique(guessed_words %>% filter(budget ==32)$word)
unique(guessed_words %>% filter(budget ==32))
unique(guessed_words %>% filter(budget ==32) %>% pull(word))
length(unique(guessed_words %>% filter(budget ==32) %>% pull(word)))
sjPlot::plot_models(models_2to16$model)
sjPlot::plot_models(models_2to16$model[[1]])
sjPlot::plot_models(models_2to16$model[[1]], type == "int")
sjPlot::plot_model(models_2to16$model[[1]], type == "int")
sjPlot::plot_model(models_2to16$model[[1]], type == "int")
models_2to16$model[[1]]
sjPlot::plot_model(models_2to16$model[[1]], type == "int")
sjPlot::plot_model(models_2to16$model[[1]], type == "eff")
?plot_model
sjPlot::plot_model(models_2to16$model[[1]], type = "eff")
